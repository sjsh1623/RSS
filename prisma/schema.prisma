generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}


model article {
  id           Int                      @id @default(autoincrement())
  url          String
  urlHash      String                   @unique @db.VarChar(64)
  title        String
  pubDate      DateTime                 @db.Timestamp(6)
  source       String
  category     String
  language     String
  shortSummary String
  longSummary  String
  imageUrl     String
  context      String?
  createdAt    DateTime                 @default(now()) @db.Timestamp(6)
  embedding    Unsupported("vector")?
  context_tsv  Unsupported("tsvector")?

  @@index([category], map: "idx_category_article")
  @@index([language], map: "idx_language_article")
}


model authCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([email], name: "idx_authcode_email")
}

model token {
  id           Int      @id @default(autoincrement())
  email        String
  accessToken  String
  refreshToken String   @unique
  createdAt    DateTime @default(now())
}

model category {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preferences userCategoryPreference[]
}

model sourceType {
  id   Int    @id @default(autoincrement())
  name String
  type String

  preferences userCategoryPreference[]
  rss         rss[]
}

model userCategoryPreference {
  id           Int @id @default(autoincrement())
  userId       Int
  categoryId   Int
  sourceTypeId Int

  category   category   @relation(fields: [categoryId], references: [id])
  sourceType sourceType @relation(fields: [sourceTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, categoryId, sourceTypeId])
}

model rss {
  id           Int       @id(map: "rss_source_pkey") @default(autoincrement())
  url          String    @unique(map: "rss_source_url_key")
  language     String
  isActive    Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @db.Timestamp(6)
  sourceTypeId Int
  sourceType sourceType @relation(fields: [sourceTypeId], references: [id])
}

model user {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?  @db.VarChar(100)
  createdAt DateTime @default(now())
}